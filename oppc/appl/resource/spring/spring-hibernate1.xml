<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.1.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.1.xsd
	">
	
	<!-- 配置数据源 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" />

		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />

		<property name="validationQuery" value="${validationQuery}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />

		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" /> 
		<property name="filters" value="mergeStat" />-->
	</bean>

	<!-- 配置hibernate session工厂 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.hbm2dll.auto">update</prop>
				<prop key="hibernate.jdbc.use_scrollable_resultset">false</prop>
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
			</props>
		</property>
		<!-- 自动扫描注解方式配置的hibernate类文件 -->
		<property name="packagesToScan">
			<list>
				<value>com.oraabrand.*.entity</value>
			</list>
		</property>
	</bean>
	<!-- 配置事务管理器 -->
	<bean name="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- 查询处理 -->
	<bean class="com.oraabrand.core.db.QueryHandle">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<!-- 拦截器方式配置事物 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception" timeout="-1"/>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception" timeout="-1"/>
			<tx:method name="create*" propagation="REQUIRED" rollback-for="java.lang.Exception" timeout="-1"/>
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception" timeout="-1"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception" timeout="-1"/>
			<tx:method name="merge*" propagation="REQUIRED" rollback-for="java.lang.Exception" timeout="-1"/>
			<tx:method name="del*" propagation="REQUIRED" rollback-for="java.lang.Exception" timeout="-1"/>
			<tx:method name="remove*" propagation="REQUIRED" rollback-for="java.lang.Exception" timeout="-1"/>
			<tx:method name="put*" propagation="REQUIRED" rollback-for="java.lang.Exception" timeout="-1"/>
			<tx:method name="use*" propagation="REQUIRED" rollback-for="java.lang.Exception" timeout="-1"/>
			<tx:method name="run*" propagation="REQUIRED" rollback-for="java.lang.Exception" timeout="-1"/>
			
			<!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到-->
			<tx:method name="get*" propagation="REQUIRED" read-only="true" rollback-for="java.lang.Exception" timeout="-1"/>
			<tx:method name="count*" propagation="REQUIRED" read-only="true" rollback-for="java.lang.Exception" timeout="-1"/>
			<tx:method name="find*" propagation="REQUIRED" read-only="true" rollback-for="java.lang.Exception" timeout="-1"/>
			<tx:method name="list*" propagation="REQUIRED" read-only="true" rollback-for="java.lang.Exception" timeout="-1"/>
			<tx:method name="*" propagation="REQUIRED" rollback-for="java.lang.Exception" timeout="-1"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 定义AOP配置 -->
	<!-- proxy-target-class属性值决定是基于接口的还是基于类的代理被创建。
		   如果proxy-target-class 属性值被设置为true，那么基于类的代理将起作用（这时需要cglib库）。
		   如果proxy-target-class属值被设置为false或者这个属性被省略，那么标准的JDK基于接口的代理 -->
	<aop:config proxy-target-class="true">
		<aop:pointcut id="systemPointcut" expression="execution(* com.oraabrand.*.services.impl.*Service.*(..))" />
		<aop:advisor pointcut-ref="systemPointcut" advice-ref="transactionAdvice"/>
	</aop:config>
   
    <!-- 配置druid监控spring jdbc -->
	<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
	</bean>
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
		<property name="patterns">
			<list>
				<value>com.oraabrand.*.services.impl.*</value>
			</list>
		</property>
	</bean>
	<aop:config>
		<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
	</aop:config>
</beans>